if(raw) return(list(apiCall,apiReq))
startline<-getJSONStartLine(apiReq)
parsedJSON <- rjson::fromJSON(capture.output(cat(apiReq[startline:length(apiReq)])))
listDF <- as.data.frame(t(do.call(cbind,parsedJSON)))
return(listDF)}
mytok<-tokenReq()
TOKEN<-mytok
directoryService(mytok, raw=F)
quit
quit()
tokenReq <- function(){
tokenReq <- system('curl -i -X POST  https://api.developer.nielsen.com/oauth2/token -d "grant_type=password&username=apiuser.cafemom@cafemom.com&password=GgGp9u4sy" -H "Content-Type: application/x-www-form-urlencoded; charset="UTF-8"" -H "Authorization: Basic N0VzYTdFNHZIdjgzOnpSODFncWljTjlqSmRJazdnTVJo"',ignore.stderr=T,intern=T)
if(tokenReq[1] == "HTTP/1.1 200 OK\r"){
TOKEN <- strsplit(tokenReq[13],split='\"')[[1]][22]}
else{
stop('API did not return 200 OK')}
return(TOKEN)}
directoryService <- function(TOKEN, raw=F){
callL <- list()
callL[[1]] <- 'curl -i -X POST https://api.developer.nielsen.com/campaignratings/v1/DirectoryService'
callL[[2]] <- '-H "Content-Type: application/xml"'
callL[[3]] <- '-H "Accept: application/json"'
callL[[4]] <- '-H "Authorization: Bearer TOKEN"'
callL[[5]] <- '-H "dmzId: apiuser.cafemom@cafemom.com"'
callL[[6]] <- '-d \'<xml></xml>\''
apiCall <- capture.output(cat(unlist(callL)))
apiCall <- gsub('TOKEN',   TOKEN,          apiCall)
apiReq <- system(apiCall,intern=T)
if(raw) return(list(apiCall,apiReq))
startline<-getJSONStartLine(apiReq)
parsedJSON <- rjson::fromJSON(capture.output(cat(apiReq[startline:length(apiReq)])))
listDF <- as.data.frame(t(do.call(cbind,parsedJSON)))
return(listDF)}
mytok<-tokenReq()
TOKEN<-mytok
directoryService(mytok, raw=F)
tokenReq <- function(){
tokenReq <- system('curl -i -X POST https://api.developer.nielsen.com/watch/oauth/token -d "grant_type=password&username=apiuser.cafemom@cafemom.com&password=GgGp9u4sy" -H "Content-Type: application/x-www-form-urlencoded; charset="UTF-8"" -H "Authorization: Basic N0VzYTdFNHZIdjgzOnpSODFncWljTjlqSmRJazdnTVJo"',ignore.stderr=T,intern=T)
if(tokenReq[1] == "HTTP/1.1 200 OK\r"){
TOKEN <- strsplit(tokenReq[13],split='\"')[[1]][22]}
else{
stop('API did not return 200 OK')}
return(TOKEN)}
directoryService <- function(TOKEN, raw=F){
callL <- list()
callL[[1]] <- 'curl -i -X POST https://api.nielsen.com:8081/campaignratings/v1/DirectoryService'
callL[[2]] <- '-H "Content-Type: application/xml"'
callL[[3]] <- '-H "Accept: application/json"'
callL[[4]] <- '-H "Authorization: Bearer TOKEN"'
callL[[5]] <- '-H "dmzId: apiuser.cafemom@cafemom.com"'
callL[[6]] <- '-d \'<xml></xml>\''
apiCall <- capture.output(cat(unlist(callL)))
apiCall <- gsub('TOKEN',   TOKEN,          apiCall)
apiReq <- system(apiCall,intern=T)
if(raw) return(list(apiCall,apiReq))
startline<-getJSONStartLine(apiReq)
parsedJSON <- rjson::fromJSON(capture.output(cat(apiReq[startline:length(apiReq)])))
listDF <- as.data.frame(t(do.call(cbind,parsedJSON)))
return(listDF)}
mytok<-tokenReq()
TOKEN<-mytok
directoryService(mytok, raw=F)
quit()
Sys.Date() - 70
setwd("~/")
df <- read.csv('pima-indians-diabetes.csv', header=FALSE, stringsAsFactors=FALSE)
View(df)
library(rattle)
install.library('rattle')
install.packages('rattle')
m <- lm(V9 ~ ., df)
summary(m)
plot(df$V1,df$V9)
plot(jitter(df$V1),df$V9)
plot(jitter(df$V2),df$V9)
plot(jitter(df$V3),df$V9)
library(ggplot2)
ggplot(df, aes(x=V9, fill=V1)) + geom_density(alpha=.3)
ggplot(df, aes(x=V1, fill=V9)) + geom_density(alpha=.3)
df$V9 <- as.character(df$V9)
m <- lm(V9 ~ ., df)
summary(m)
ggplot(df, aes(x=V1, fill=V9)) + geom_density(alpha=.3)
ggplot(df, aes(x=V2, fill=V9)) + geom_density(alpha=.3)
ggplot(df, aes(x=V3, fill=V9)) + geom_density(alpha=.3)
ggplot(df, aes(x=V4, fill=V9)) + geom_density(alpha=.3)
ggplot(df, aes(x=V5, fill=V9)) + geom_density(alpha=.3)
ggplot(df, aes(x=V6, fill=V9)) + geom_density(alpha=.3)
ggplot(df, aes(x=V7, fill=V9)) + geom_density(alpha=.3)
ggplot(df, aes(x=V8, fill=V9)) + geom_density(alpha=.3)
table(df$V9)
df <- read.csv('pima-indians-diabetes.csv', header=FALSE, stringsAsFactors=FALSE)
df$V9 <- as.character(df$V9)
m <- lm(V9 ~ ., df)
library(rpart)
t <- rpart(V9 ~ ., df)
plot(t)
text(t)
plot(t, uniform=TRUE)
text(fit, cex=.8)
plot(t, uniform=TRUE)
text(t, cex=.8)
t_pred <- predict(t, df)
confMat <- table(df$V9,t_pred)
accuracy <- sum(diag(confMat))/sum(confMat)
length(t_pred)
lenght(df)
lenght(df$V9)
length(df$V9)
predict(t, df, type='class')
t_pred <- predict(t, df, type='class')
df$pred <- predict(t, df, type='class')
confMat <- table(df$V9,df$pred)
accuracy <- sum(diag(confMat))/sum(confMat)
confMat
accuracy
t <- function(pass=FALSE) {
x = 1
y = 2
if (pass=FALSE) {
return(NA)
}
z = x + y
return(z)
}
t <- function(pass=FALSE) {
x <- 1
y <- 2
if (pass=FALSE) {
return(NA)
}
z <- x + y
return(z)
}
t <- function(pass=FALSE) {
x <- 1
y <- 2
z <- x + y
return(z)
}
t <- function(pass=FALSE) {
x <- 1
y <- 2
if (pass==FALSE) {
return(NA)
}
z <- x + y
return(z)
}
t()
k <- t()
k
a <- rnorm(1,10)
a <- rnorm(100,10)
a <- rnorm(100,10, 5)
a <- rnorm(100,10, 5)
a <- rnorm(100,10, 5)
a <- rnorm(100,87, 5)
a <- rnorm(100,114,10)
a <- rnorm(100,88, 20)
l = list(a, b, c, d)
a <- rnorm(100,10, 5)
b <- rnorm(100,87, 5)
c <- rnorm(100,114,10)
d <- rnorm(100,88, 20)
l = list(a, b, c, d)
x <- rnorm(100,113,9)
x
hist(x)
hist(cat(a,b))
cat(a,b)
hist(cat(a,b))
t.test(a,b)
t.test(x,a)
t.test(x,c)
library(jsonlite)
j <- fromJSON('x.json')
j <- fromJSON('y.json')
j <- fromJSON('x.json')
head(j)
View(j)
nrow(j)
setwd('~/')
spend <- read.csv('spend.csv', header=TRUE)
articles <- read.csv('articles_data.csv', header=TRUE)
head(spend)
head(articles)
articles <- read.csv('articles_data.csv', sep='\t', header=TRUE)
df <- merge(spend, articles, on='post_id')
View(df)
setwd('~/')
articles <- read.csv('articles.csv', sep=',', header=TRUE)
spend <- read.csv('spend.csv', header=TRUE)
View(articles)
View(spend)
View(articles)
View(spend)
df <- merge(spend, articles, on='post_id')
View(df)
setwd('~/Projects/tempo_tfidf/')
coll <- read.csv('ken_lay_coll_freqs.csv', stringsAsFactors=FALSE)
head(coll)
View(coll)
View(t(coll))
colnames(coll) <- 'collection_freq'
doc_freqs <- read.csv('ken_lay_doc_freqs.csv', stringsAsFactors=FALSE)
View(doc_freqs)
index(coll)
rownames(coll)
View(coll)
setwd('~/Projects/tempo_tfidf/')
coll <- read.csv('ken_lay_coll_freqs.csv', stringsAsFactors=FALSE)
coll <- t(coll)
colnames(coll) <- 'collection_freq'
head(rownames(coll))
coll$token <- rownames(coll)
View(coll)
coll <- read.csv('ken_lay_coll_freqs.csv', stringsAsFactors=FALSE)
coll <- as.data.frame(t(coll))
colnames(coll) <- 'collection_freq'
coll$token <- rownames(coll)
setwd('~/Projects/tempo_tfidf/')
coll <- read.csv('ken_lay_coll_freqs.csv', stringsAsFactors=FALSE)
coll <- as.data.frame(t(coll))
colnames(coll) <- 'collection_freq'
coll$token <- rownames(coll)
doc_freqs <- read.csv('ken_lay_doc_freqs.csv', stringsAsFactors=FALSE)
colnames(doc_freqs)[1] <- 'token'
doc_freqs <- merge(doc_freqs, coll, by='token')
View(doc_freqs)
lapply(doc_freqs, sum)
colnames(doc_freqs)
feb <- doc_freqs[c('token', 'February.2001', 'collection_freq')]
View(feb)
View(feb)
feb_sum <- sum(feb$February.2001)
feb_sum
sum(feb$February.2001)
sum(na.omit(feb$February.2001))
feb_sum <- sum(na.omit(feb$February.2001))
feb$prop <- feb$February.2001 / feb_sum
View(feb)
feb$log_scaled = log(1 + feb$prop)
logarithmically scaled frequency: tf(t,d) = log (1 + ft,d);[6]
View(feb)
plot(feb$prop)
head(feb[order(-feb$prop),], 20)
head(feb[order(-feb$log_scaled),], 20)
feb$original <- feb$February.2001 * log( 1 / collection_freq)
feb$original <- feb$February.2001 * log( 1 / feb$collection_freq)
View(feb)
head(feb[order(feb$original),], 20)
head(feb[order(-feb$original),], 20)
feb <- feb[order(-feb$original),]
View(feb)
feb$original_plus <- feb$February.2001 * log( 1 + (1 / feb$collection_freq))
View(feb)
View(doc_freqs)
sum(ifelse(feb$February.2001 > 0, 1, 0))
setwd('~/Projects/tempo_tfidf/')
coll <- read.csv('ken_lay_coll_freqs.csv', stringsAsFactors=FALSE)
coll <- as.data.frame(t(coll))
colnames(coll) <- 'collection_freq'
coll$token <- rownames(coll)
doc_freqs <- read.csv('ken_lay_doc_freqs.csv', stringsAsFactors=FALSE)
colnames(doc_freqs)[1] <- 'token'
doc_freqs <- merge(doc_freqs, coll, by='token')
doc_freqs[is.na(doc_freqs)] <- 0
View(doc_freqs)
setwd('~/Projects/tempo_tfidf/')
coll <- read.csv('ken_lay_coll_freqs.csv', stringsAsFactors=FALSE)
coll <- as.data.frame(t(coll))
colnames(coll) <- 'collection_freq'
coll$token <- rownames(coll)
doc_freqs <- read.csv('ken_lay_doc_freqs.csv', stringsAsFactors=FALSE)
colnames(doc_freqs)[1] <- 'token'
doc_freqs[is.na(doc_freqs)] <- 0
View(doc_freqs)
lapply(doc_freqs,sum)
lapply(doc_freqs[-1],sum)
View(lapply(doc_freqs[-1],sum))
View(rowSums(doc_freqs[-1]))
View(as.data.frame(rowSums(doc_freqs[-1])))
doc_freqs$n_docs <- rowSums(doc_freqs[-1])
View(doc_freqs)
doc_freqs <- merge(doc_freqs, coll, by='token')
feb <- doc_freqs[c('token', 'February.2001', 'collection_freq', 'n_docs')]
feb_sum <- sum(na.omit(feb$February.2001))
feb$tfidf <- feb$February.2001 * log( 16 / feb$n_docs )
View(feb)
feb <- feb[order(-feb$tfidf),]
View(feb)
feb$lucene <- feb$February.2001 * (1 + log(16 / (feb$n_docs + 1)))
feb <- feb[order(-feb$lucene),]
View(feb)
feb$orig_lucene <- feb$February.2001 * (1 + log( 1 / (feb$collection_freq + 1)))
feb <- feb[order(-feb$orig_lucene),]
View(feb)
feb$original <- feb$February.2001 * log( 1 / feb$collection_freq)
feb <- feb[order(-feb$lucene),]
View(feb)
feb <- feb[order(feb$original),]
View(feb)
feb <- feb[order(-feb$lucene),]
View(feb)
1^.5
10^.5
feb$lucene <- feb$February.2001^.5 * (1 + log(16 / (feb$n_docs + 1)))
feb <- feb[order(-feb$lucene),]
View(feb)
cor(feb$lucene, feb$original)
cor(feb$lucene, feb$tfidf)
cor(feb$lucene, feb$orig_lucene)
setwd('~/Projects/tempo_tfidf/')
coll <- read.csv('ken_lay_coll_freqs.csv', stringsAsFactors=FALSE)
coll <- as.data.frame(t(coll))
colnames(coll) <- 'collection_freq'
coll$token <- rownames(coll)
doc_freqs <- read.csv('ken_lay_doc_freqs.csv', stringsAsFactors=FALSE)
colnames(doc_freqs)[1] <- 'token'
doc_freqs[is.na(doc_freqs)] <- 0
doc_freqs$n_docs <- rowSums(doc_freqs[-1])
doc_freqs <- merge(doc_freqs, coll, by='token')
feb <- doc_freqs[c('token', 'February.2001', 'collection_freq', 'n_docs')]
feb_sum <- sum(na.omit(feb$February.2001))
# Score: Proportion
# tf(d) / sum(tf(d))
feb$prop <- feb$February.2001 / feb_sum
# Score: logarithmically scaled frequency:
# tf(t,d) = log (1 + tf,d)
feb$log_scaled = log(1 + feb$prop)
# Score: Original:
# tf(d) * log( 1 / tf(c) )
feb$original <- feb$February.2001 * log( 1 / feb$collection_freq)
# IDEA: What if we multiple original by some Master Frequency to correct for
# relatively common terms acheiving a a high score?
# Score: Original + 1
# tf(t,d) * log( 1 + (tf(c)))
feb$original_plus <- feb$February.2001 * log( 1 + (1 / feb$collection_freq))
# Score: Vanilla TF-IDF
# tf(d) * log( number of documents / number of docs containing t)
feb$tfidf <- feb$February.2001 * log( 16 / feb$n_docs )
# tf (t in d) = frequency
# idf (t) = 1 + log ( N / ni + 1).
# This is used in the popular Lucene engine.
feb$lucene <- feb$February.2001^.5 * (1 + log(16 / (feb$n_docs + 1)))
# Score: Original + Lucene
# tf(d) * (1 + log( 1 / (1 + tf(c) )))
feb$orig_lucene <- feb$February.2001 * (1 + log( 1 / (feb$collection_freq + 1)))
View(feb)
cor(feb[5:11])
plot(feb$original_plus, feb$lucene)
plot(feb$prop, feb$log_scaled)
feb <- feb[order(-feb$lucene),]
View(feb)
#(.5 * (feb$original / 1) + (1 - .5)) * feb$original
feb$font_orig <- as.integer( (.5 * (feb$original / 1) + (1 - .5)) * feb$original  )
feb <- feb[order(-feb$original), ]
View(feb)
feb$font_lucene <- as.integer( (.5 * (feb$lucene / 1) + (1 - .5)) * feb$lucene  )
feb <- feb[order(-feb$lucene), ]
View(feb)
feb$font_orig_plus <- as.integer( (.5 * (feb$original_plus / 1) + (1 - .5)) * feb$original_plus  )
feb <- feb[order(-feb$original_plus), ]
View(feb)
hist(feb$tfidf)
hist(feb$original)
hist(feb$lucene)
normalize <- function(x) {
num = x - min(x)
denom = max(x) - min(x)
return(num / denom)
}
feb$font_orig <- as.integer(normalize( (.5 * (feb$original / 1) + (1 - .5)) * feb$original  ))
feb <- feb[order(-feb$original), ]
View(feb)
feb$font_orig <- as.integer( (.5 * (normalize(feb$original) / 1) + (1 - .5)) * normalize(feb$original  ))
feb <- feb[order(-feb$original), ]
View(feb)
normalize(feb$orig_lucene)
normalize(feb$original)
feb$font_orig <- as.integer( (.5 * (normalize(feb$original) / 1) + (1 - .5)) * 100)
feb <- feb[order(-feb$original), ]
View(doc_freqs)
View(feb)
plot(feb$original, feb$prop)
plot(feb$lucene, feb$prop)
plot(feb$original_plus, feb$prop)
nrow(feb[feb$original == max(feb$original),])
nrow(feb[feb$lucene == max(feb$lucene),])
max(feb$lucene)
lapply(feb[5:11], sd)
lapply(feb[5:11], var)
hist(lucene)
hist(feb$lucene)
hist(feb$prop)
hist(feb$original)
min(feb$lucene)
max(feb$lucene)
feb$font_lucene <- as.integer( (.5 * (normalize(feb$lucene) / 1) + (1 - .5)) * 100 )
feb <- feb[order(-feb$lucene), ]
View(feb)
head(feb)
luc <- feb[['token', 'lucene']]
luc <- feb[c('token', 'lucene')]
luc$norm <- normalize(luc$lucene)
plot(feb$lucene, feb$font_lucene)
plot(log(feb$lucene), feb$font_lucene)
plot(feb$lucene^2, feb$font_lucene)
hist(feb$prop)
feb$font_prop <- as.integer( (.5 * (feb$prop / 1) + (1 - .5)) * 100  )
feb <- feb[order(-feb$prop), ]
View(feb)
plot(feb$prop)
plot(feb$prop, feb$font_prop)
.5*100^(feb$lucene)
plot(.5*100^(feb$lucene))
plot(.5*100^(feb$lucene), feb$font_lucene)
head(.5*100^(feb$lucene))
plot(.5*(feb$lucene)^100, feb$font_lucene)
plot(100*(feb$lucene)^.5, feb$font_lucene)
plot(100*(feb$lucene)^.2, feb$font_lucene)
plot(100*(feb$lucene)^.05, feb$font_lucene)
plot(100*(feb$lucene/1)^.5, feb$font_lucene)
plot(100*(feb$lucene/16)^.5, feb$font_lucene)
plot(100*(feb$lucene)^.5, feb$font_lucene)
plot(100*(feb$lucene)^.5 - 100, feb$font_lucene)
plot(100*(feb$lucene)^.5, feb$font_lucene)
plot(.5*(feb$lucene)^100, feb$font_lucene)
head(.5*100^(feb$lucene))
plot(.5*100^(feb$lucene), feb$font_lucene)
plot(1 / (.5*(feb$lucene)^100), feb$font_lucene)
plot(1/100 + .5(feb$lucene))
plot(1/(100 + .5(feb$lucene)))
1/(100 + .5(feb$lucene))
1/(100 + .5*(feb$lucene)
)
plot(1/(100 + .5*(feb$lucene)))
plot(1/(100 + .5*(feb$lucene)), feb$font_lucene)
plot(2^(feb$lucene))
plot(2^(feb$lucene), feb$font_lucene)
plot(5^(feb$lucene), feb$font_lucene)
plot(5^(feb$lucene) - 50, feb$font_lucene)
plot(5^(feb$lucene) * .50, feb$font_lucene)
plot(feb$font_lucene, 5^(feb$lucene) * .50)
plot(feb$font_lucene, 5^(feb$lucene) * .20)
plot(feb$font_lucene, 5^(feb$lucene) * 0)
plot(feb$font_lucene, 5^(feb$lucene) * .001)
plot(feb$font_lucene, 5^(feb$lucene))
plot(feb$font_lucene, 5^(feb$lucene - 50))
plot(feb$font_lucene, 5^(feb$lucene))
plot(feb$font_lucene, ^(feb$lucene))
plot(feb$font_lucene, 1^(feb$lucene))
plot(feb$font_lucene, 2^(feb$lucene))
plot(feb$font_lucene, 2^(feb$lucene)/2)
plot(feb$lucene, 2^(feb$lucene)/2)
plot(feb$lucene, 2^(feb$lucene)/)
plot(feb$lucene, 2^(feb$lucene))
plot(feb$lucene, 2^(feb$lucene*.5))
plot(feb$lucene, 2^(feb$lucene+100))
plot(feb$lucene, 2^(feb$lucene)/100)
plot(feb$lucene, 2^(feb$lucene)/.5)
plot(feb$lucene, 2^(feb$lucene)/.75)
plot(feb$lucene, 2^(feb$lucene)/2)
plot(feb$lucene, 2^(feb$lucene)/.25)
plot(feb$lucene, 2^(feb$lucene)/.2)
wc <- read.csv('~/Projects/wl/wl_font_sizes.csv')
wc <- read.csv('~/Projects/wordline/wl_font_sizes.csv')
head(wc)
wc <- read.csv('~/Projects/wordline/wl_font_sizes.csv')
colnames(wc) <- c('word', 'freq', 'font_size', 'rs', 'last_freq', 'font_size_end')
plot(wc$freq, wc$font_size)
hist(wc$freq)
hist(normalize(feb$lucene))
hist(feb$lucene)
sd(wc$freq)
sd(wc$font_size)
sd(feb$lucene
)
plot(jitter(wc$freq), wc$font_size)
plot(jitter(wc$freq), jitter(wc$font_size))
colnames(feb)
hist(feb$font_prop)
hist(feb$prop)
hist(wc$freq)
hist(feb$lucene)
hist(normalize(feb$lucene))
min(feb$lucene)
hist(normalize(feb$lucene[feb$lucene >= 0]))
head(wc)
feb$lucene_normal <- normalize(feb$lucene[feb$lucene >= 0])
feb <- feb[order(-feb$lucene_normalp), ]
normalize(c(0,0))
feb$lucene_normal <- feb$lucene
feb$lucene_normal[feb$lucene_normal < 0] <- 0
feb$lucene_normal <- normalize(feb$lucene_normal)
hist(feb$lucene_normal)
feb <- feb[order(-feb$lucene_normal), ]
View(feb)
feb$font_lucene_normal <- as.integer( (.5 * (normalize(feb$lucene_normal) / 1) + (1 - .5)) * 100 )
View(feb)
View(wc)
feb$lucene_max <- feb$lucene / max(feb$lucene)
feb <- feb[order(-feb$lucene_max), ]
View(feb)
cor(feb$lucene, feb$lucene_max)
feb$font_lucene_max <- s.integer( (.5 * (normalize(feb$lucene_max) / 1) + (1 - .5)) * 100 )
feb$font_lucene_max <- s.integer( (.5 * (normalize(feb$lucene_max) / 1) + (1 - .5)) * 100 )
feb$font_lucene_max <- as.integer( (.5 * (normalize(feb$lucene_max) / 1) + (1 - .5)) * 100 )
View(feb)
head(wc)
View(feb)
